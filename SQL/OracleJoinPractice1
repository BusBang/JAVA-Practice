--------------------------------
----------2020-03-09---------
--------------------------------

--부서 단위로 임금 보기
SELECT DEPT_CODE, SUM(SALARY), FLOOR(AVG(SALARY)) 평균, COUNT(*) 인원수
FROM EMPLOYEE
GROUP BY DEPT_CODE;

SELECT
    DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여') AS 성별,
    FLOOR(AVG(SALARY)) AS 평균,
    SUM(SALARY) AS 합계,
    COUNT(*) AS 인원수
FROM EMPLOYEE
GROUP BY DECODE(SUBSTR(EMP_NO,8,1),1,'남',2,'여');

--부서 단위로 임금을 합해 300만원이 넘는 부서를 뽑아낸다.
--HAVING은 GROUPING된 그룹에 조건을 걸 때 사용한다.
--WHERE은 시작부터 300만원 이상 사람들만 뽑아서 그룹핑을 하는 것
SELECT DEPT_CODE, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING FLOOR(AVG(SALARY))>3000000;

--JOIN PRACTICE
--23개 행
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE;

--9개행
SELECT *
FROM DEPARTMENT;

--WHERE을 안 쓸시
--23 * 9 = 207개 행 출력
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT;

--같은 코드를 가진 행만 출력. 21개 행
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID;

-- ANSI 표준 구문 - JOIN ON / USING
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID); --COLUMN 명이 다를 때

SELECT EMP_NAME, JOB_CODE --JOB CODE가 같을 때 뽑음 
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE); --column명이 같을 때 사용

--LEFT/RIGHT JOIN
--먼저 오는 테이블에 일치하는 테이블을 출력
SELECT EMP_ID , EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);


--나중에 나오는 테이블에 일치하는 테이블을 출력
SELECT EMP_ID , EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

--전부 포함
SELECT EMP_ID , EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

--CROSS JOIN
SELECT EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
CROSS JOIN DEPARTMENT;

--SELF JOIN, 별칭 지정
SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, MANAGER_ID FROM EMPLOYEE
WHERE EMP_ID = MANAGER_ID; --아무것도 나오지 않음

SELECT E1.EMP_NAME, E1.SALARY 사원월급, E1.MANAGER_ID, E2.EMP_NAME 관리자이름, E2.SALARY 관리자월급
FROM EMPLOYEE E1    -- E1 = 사원테이블, E2 = 관리자테이블
JOIN EMPLOYEE E2 ON (E1.MANAGER_ID = E2.EMP_ID);

--다중 조인 *조인의 순서가 매우 중요
SELECT * FROM DEPARTMENT;
SELECT * FROM LOCATION;
SELECT * FROM EMPLOYEE; 

SELECT EMP_NAME, SALARY, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID) -- (1) DEPARTMENT와 조인
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE); -- (2) LOCATION과 조인. 순서가 바뀌면 안 된다.

--실습 문제
--1. 2020년 12월 25일은 무슨 요일인지 조회하시오.
SELECT TO_CHAR(TO_DATE(20201225, 'YYYYMMDD'),'DAY') AS 요일 FROM DUAL;

--2. 주민번호가 1970년대 생이면서 성별이 여자이고,
--성이 전씨인 직원들의 사원명, 주민번호, 부서명, 직급명을 조회하시오
SELECT * FROM EMPLOYEE;
SELECT * FROM JOB;
SELECT * FROM DEPARTMENT;
SELECT * FROM LOCATION;
SELECT * FROM SAL_GRADE;
SELECT * FROM NATIONAL;

SELECT
    EMP_NAME 이름,
    EMP_NO 주민번호,
    DEPT_TITLE 부서명,
    JOB_NAME 대리
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE SUBSTR(EMP_NO,1,2)>=70 AND SUBSTR(EMP_NO,1,2)<=79 AND SUBSTR(EMP_NO,8,1)=2 AND SUBSTR(EMP_NAME,1,1)='전';

--3. 이름에 '형'자가 들어가는 직원들의 사번, 사원명, 부서명을 조회하시오.
SELECT 
    EMP_ID 사번,
    EMP_NAME 사원명,
    DEPT_TITLE 부서명
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
WHERE EMP_NAME LIKE '%형%';

--4. 해외 영업부에 근무하는 사원명, 직급명, 부서코드, 부서명을 조회하시오.
SELECT 
    EMP_NAME AS 사원명,
    JOB_NAME AS 직급명,
    DEPT_CODE AS 부서코드,
    DEPT_TITLE AS 부서명
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE DEPT_TITLE LIKE '%해외영업%';

--5. 보너스포인트를 받은 직원들의 사원명, 보너스포인트, 부서명, 근무지역명을 조회하시오.
SELECT
    EMP_NAME 사원명,
    BONUS 보너스,
    DEPT_TITLE 부서명,
    LOCAL_NAME 근무지역명
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
LEFT JOIN LOCATION ON (LOCATION_ID=LOCAL_CODE)
WHERE BONUS IS NOT NULL;

--6. 부서코드가 D2인 직원들의 사원명, 직급명, 부서명, 근무지역명을 조회하시오.
SELECT
    EMP_NAME 사원명,
    JOB_NAME 직급명,
    DEPT_TITLE 부서명,
    LOCAL_NAME 근무지역명
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN JOB USING (JOB_CODE)
JOIN LOCATION ON (LOCATION_ID=LOCAL_CODE)
WHERE DEPT_CODE LIKE 'D2';

--7. 급여 등급 테이블의 최대급여 (MAX_SAL) -50만원 보다 많이 받는 직원들의 사원명, 직급명, 급여, 연봉을 조회하시오
--사원테이블과 급여테이블을 SAL_LEVEL컬럼 기준으로 조인할 것
SELECT 
    EMP_NAME 사원명,
    JOB_NAME 직급명,
    SALARY 급여,
    SALARY*12 연봉,
    MAX_SAL 최대급여
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN SAL_GRADE USING(SAL_LEVEL)
WHERE (MAX_SAL-500000)<SALARY;

--8. 한국(KO)과 일본(JP)에 근무하는 직원들의 사원명, 부서명, 지역명, 국가명을 조회하시오.
SELECT
    EMP_NAME 사원명,
    DEPT_TITLE 부서명,
    LOCAL_NAME 지역명,
    NATIONAL_NAME 국가명
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE=DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_CODE IN ('KO', 'JP');

--9. 같은 부서에 근무하는 직원들의 사원명, 부서명, 동료이름을 조회하시오 (SELF JOIN 사용)
SELECT
    E1.EMP_NAME 사원명,
    DEPT_TITLE 부서명,
    E2.EMP_NAME 동료이름
FROM EMPLOYEE E1
JOIN DEPARTMENT ON (DEPT_ID = E1.DEPT_CODE)
JOIN EMPLOYEE E2 ON (E1.DEPT_CODE = E2.DEPT_CODE)
WHERE E1.EMP_NAME != E2.EMP_NAME
ORDER BY E1.EMP_NAME;

--10. 보너스포인트가 없는 직원들 중에서 직급이 차장과 사원인 직원들의
--사원명, 직급명, 급여를 조회하시오. 단, JOIN과 IN을 사용할 것
SELECT
    EMP_NAME 사원명,
    JOB_NAME 직급명,
    SALARY 급여
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE BONUS IS NULL AND JOB_NAME IN ('차장', '사원');

--11. 재직중인 직원과 퇴사한 직원의 수를 조회하시오.
SELECT 
    DECODE(ENT_YN,'N','재직','Y','퇴사') AS 재직여부,
    COUNT(*) AS 인원수
FROM EMPLOYEE
GROUP BY DECODE(ENT_YN,'N','재직','Y','퇴사');
