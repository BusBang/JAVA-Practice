CREATE TABLE EMP_01 (
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);
INSERT INTO EMP_01(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
); --SUB QUERY를 통해 INSERT를 할 수 있다.
SELECT * FROM EMP_01;

-- SUB QUERY를 이용해 두 개 테이블에 동시에 INSERT하기
-- (1) 테이블 생성
CREATE TABLE EMP_02
AS SELECT EMP_ID, EMP_NAME, DEPT_CODE FROM EMPLOYEE WHERE 1=0; -- TALBE의 구조만 복사

CREATE TABLE EMP_03
AS SELECT EMP_ID, EMP_NAME, JOB_CODE FROM EMPLOYEE WHERE 1=0; -- TALBE의 구조만 복사

--(2) INSERT ALL 사용
INSERT ALL
INTO EMP_02 VALUES (EMP_ID, EMP_NAME, DEPT_CODE)
INTO EMP_03 VALUES (EMP_ID, EMP_NAME, JOB_CODE)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE WHERE SALARY > 3000000; -- 16개의 행이 INSERT 됨

--SELECT 확인. 8개의 행만 나옴
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE WHERE SALARY > 3000000;

CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

SELECT * FROM DEPT_COPY;
--인사관리부 -> 슈퍼갑
UPDATE DEPT_COPY SET DEPT_TITLE='슈퍼갑' WHERE DEPT_ID='D1';
--UPDATE 테이블이름 SET 변경할문구 WHERE 조건;
--대개 조건으로 PK를 한다.
SELECT * FROM DEPT_COPY;

CREATE TABLE EMP_SALARY
AS SELECT EMP_ID, EMP_NAME, SALARY, BONUS FROM EMPLOYEE;
SELECT * FROM EMP_SALARY;

SELECT SALARY, BONUS FROM EMP_SALARY WHERE EMP_ID=204;
--방명수의 월급을 유재식(204)처럼 3400000, 보너스 0.2로 변경
UPDATE EMP_SALARY SET
SALARY=(SELECT SALARY FROM EMP_SALARY WHERE EMP_ID=204),
BONUS=(SELECT BONUS FROM EMP_SALARY WHERE EMP_ID=204)
WHERE EMP_NAME = '방명수';
SELECT * FROM EMP_SALARY;

--부서 삭제 (기술지원부)
SELECT * FROM DEPT_COPY;
DELETE FROM DEPT_COPY WHERE DEPT_ID = 'D8';
--외래키가 주어질 경우, 삭제가 안 된다

CREATE TABLE TEST01 (
    ID VARCHAR2(20) PRIMARY KEY,
    PW VARCHAR2(30) NOT NULL
);
CREATE TABLE TEST02(
    ID VARCHAR2 (20),
    TESTDATE DATE,
    FOREIGN KEY (ID) REFERENCES TEST01 (ID)
);
INSERT INTO TEST01 VALUES ('USER01', 'PASS01');
INSERT INTO TEST01 VALUES ('USER02', 'PASS02');
INSERT INTO TEST02 VALUES ('USER01', SYSDATE);
INSERT INTO TEST02 VALUES ('USER02', SYSDATE);
SELECT * FROM TEST01;
SELECT * FROM TEST02;

--TEST01의 USER02를 삭제해보자
DELETE FROM TEST01 WHERE ID='USER02'; -- FK가 설정되어 있기 때문에 삭제가 불가능
--종종 FK가 걸려있지만 삭제를 해야할 때가 있다. 이런 경우 임시로 비활성화를 하고 삭제를 한다.

--제약조건 확인-- (참조하는 것이 TEST02이기 때문에 TEST02를 찾는다.)
SELECT
    UC.CONSTRAINT_NAME,     --제약조건 이름
    UC.CONSTRAINT_TYPE,       --제약조건 타임
    UC.TABLE_NAME,              -- 테이블이름
    UCC.COLUMN_NAME,       --컬럼이름
    UC.SEARCH_CONDITION    --제약조건 설명
FROM USER_CONSTRAINTS UC
JOIN USER_CONS_COLUMNS UCC ON (UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME)
WHERE UC.TABLE_NAME = 'TEST02'; 

--(1) 제약조건 비활성화
ALTER TABLE TEST02
DISABLE CONSTRAINT SYS_C007100 CASCADE;
--(2) 삭제
DELETE FROM TEST01 WHERE ID='USER02'; -- 완료
--(3) 제약조건 활성화
ALTER TABLE TEST02
ENABLE CONSTRAINT SYS_C007100; --참조값이 사라졌기 때문에 활성화가 되지 않는다. (NULL 값을 넣어준다던지, 그 행을 삭제하거나 해야함)

--(3)-1 삭제
DELETE FROM TEST02 WHERE ID='USER02';

SELECT * FROM DEPT_COPY;
COMMIT;
DELETE FROM DEPT_COPY; --DELETE는 복구가 가능하다. 
TRUNCATE TABLE DEPT_COPY;
ROLLBACK; -- COMMIT 으로 삭제

/* -- TRUNCATE, DELETE 차이 --
TRUNCATE :
테이블 전체 행을 삭제 (삭제 문구도 DELETE와 다르다)
DELETE보다 수행속도가 빠름
ROLLBACK으로 복구 불가능  */




CREATE TABLE EMP_01(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
    );
    
INSERT INTO EMP_01 VALUES (1, '방찬호', '학생'); --순서대로 INSERT 해야한다

INSERT INTO EMP_01 (EMP_NAME, EMP_ID, DEPT_TITLE) 
VALUES ('이호길', 2, '학생');

SELECT * FROM EMP_01;

--만약 모든 값을 넣지 않으면 ? 
INSERT INTO EMP_01 VALUES (3, '박서현'); --들어가지 않는다.

INSERT INTO EMP_01 (EMP_NAME, EMP_ID) 
VALUES ('박서현', 3); -- 이건 들어간다 (넣지 않은 값은 NULL로 들어감)


CREATE TABLE EMP_02(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20),
    HIRE_DATE DATE DEFAULT SYSDATE
    );

INSERT INTO EMP_02 VALUES (1, '방버스', '학생', SYSDATE);           --행 삽입
SELECT * FROM EMP_02;
INSERT INTO EMP_02 VALUES (2, '오라지널', '학생', DEFAULT);        --행 삽입
INSERT INTO EMP_02 VALUES (3, '서현팍', '학생');                        --오류 발생
INSERT INTO EMP_02 (EMP_ID, EMP_NAME) VALUES (3, '서현팍');    --행삽입
SELECT * FROM EMP_02;                                                       --DEFAULT 제약 조건이 설정되어 있으면, INSERT시 제외하고 값을 넣어도 DEFAULT 값이 들어간다.

CREATE TABLE EMP_03(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20),
    HIRE_DATE DATE DEFAULT SYSDATE,
    PHONE CHAR(13) DEFAULT '000-0000-0000'
    );
INSERT INTO EMP_03 VALUES (1, '방버스', '학생', SYSDATE,'010-2435-1354');           --행 삽입
INSERT INTO EMP_03 (EMP_ID, EMP_NAME, DEPT_TITLE) VALUES (2, '오라지널', '학생');
SELECT * FROM EMP_03;

--------------
---DML 실습
-------------

--(1) 테이블 생성
CREATE TABLE RUNNINGMAN (
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2 (20) UNIQUE,
    PASS VARCHAR2 (20) NOT NULL,
    NAME VARCHAR2(20) NOT NULL,
    NICKNAME VARCHAR2 (20) UNIQUE,
    GENDER CHAR(1),
    TEL VARCHAR2 (20) DEFAULT '010-0000-0000',
    ADDRESS VARCHAR2 (90)
);
SELECT * FROM RUNNINGMAN;

--(2) 행추가
INSERT INTO RUNNINGMAN VALUES (1, 'muhan','1234','유재석','못생긴형','M','010-4958-2333','압구정');
INSERT INTO RUNNINGMAN VALUES (2, 'bignose','4444','지석진','지는해','M',default,'서울');
INSERT INTO RUNNINGMAN VALUES (3, 'tiger','6658','김종국','안꼬','M','010-6674-8986','안양');
INSERT INTO RUNNINGMAN VALUES (4, 'haha','5356','하하','신분세탁','M','010-8997-1122','서래마을');
INSERT INTO RUNNINGMAN VALUES (5, 'ace','5555','송지효','청성임','F',DEFAULT,'서울시');
INSERT INTO RUNNINGMAN VALUES (6, 'girrafe','6658','이광수','중기친구','M','010-2378-9991','남양주');
INSERT INTO RUNNINGMAN VALUES (7, 'ssapssap','5356','양세찬','김종국팬','M','010-1215-7777','동두천');
INSERT INTO RUNNINGMAN VALUES (8, 'doli','5555','전소민','전두릅','F',default,'일산');

--(3) 데이터 값 변경
UPDATE RUNNINGMAN SET PASS = '9999' WHERE NICKNAME = '중기친구';

--(4) TEL 정보 변경
UPDATE RUNNINGMAN SET TEL = '없음' WHERE TEL='010-0000-0000';

--(5) 유재석 삭제
DELETE FROM RUNNINGMAN WHERE NO='1';

--(6) TABLE 삭제
TRUNCATE TABLE RUNNINGMAN;


---------
--MERGE--
---------

CREATE TABLE M_TEST01(
    ID VARCHAR2 (20),
    NAME VARCHAR2 (20)
);

CREATE TABLE M_TEST02(
    ID VARCHAR2 (20),
    NAME VARCHAR2 (20)
);
SELECT * FROM M_TEST01;

INSERT INTO M_TEST01 VALUES('USER11', '유저11');
INSERT INTO M_TEST01 VALUES('USER22', '유저22');
INSERT INTO M_TEST01 VALUES('USER33', '유저33');
INSERT INTO M_TEST02 VALUES('USER12', '유저12');
INSERT INTO M_TEST02 VALUES('USER22', '유저22');
INSERT INTO M_TEST02 VALUES('USER32', '유저33');

MERGE INTO M_TEST01 USING M_TEST02 ON (M_TEST01.ID = M_TEST02.ID)
WHEN MATCHED THEN UPDATE SET M_TEST01.NAME = M_TEST02.NAME --MATCH하면 UPDATE
WHEN NOT MATCHED THEN INSERT VALUES (M_TEST02.ID, M_TEST02.NAME); -- NOT MATCH하면 INSERT
