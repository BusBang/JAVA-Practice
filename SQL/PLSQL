--------------------
-----PL/SQL-------
--------------------

SET SERVEROUTPUT ON -- JAVA의 SYSTEM OUT PRINT와 같은 것

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
    DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
END;
/

DECLARE
    --변수 데이터 타입
    MSG1 VARCHAR2(20);
    MSG2 VARCHAR2(20);
BEGIN
    MSG1 := '&MSG1';
    MSG2 := '&MSG2';
    DBMS_OUTPUT.PUT_LINE(MSG1);
    DBMS_OUTPUT.PUT_LINE(MSG2);
END;
---주석을 넣으면 오류 발생 / &
/
    --대입할땐 :=을 사용한다
    
--아이디를 입력하면 이름을 찾아주는 것
DECLARE
    NAME VARCHAR2(9);
    SAL NUMBER;
BEGIN
    SELECT EMP_NAME, SALARY
    INTO NAME, SAL
    FROM EMPLOYEE WHERE EMP_ID='&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : '|| NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '|| SAL);
END;
/

--실습
-- 해당 사원의 사원번호 입력시
--이름, 부서코드, 직급코드 출력

DECLARE
    NAME_C VARCHAR2 (20);
    DEPT_CO VARCHAR2 (20);
    JOB_CO VARCHAR2 (20);
BEGIN
    SELECT EMP_NAME, DEPT_CODE, JOB_CODE
    INTO NAME_C, DEPT_CO, JOB_CO
    FROM EMPLOYEE WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : '|| NAME_C);
    DBMS_OUTPUT.PUT_LINE('부서코드 : ' || DEPT_CO);
    DBMS_OUTPUT.PUT_LINE('직급코드 : ' || JOB_CO);
END;
/

-- 해당 사원의 사원번호 입력 시
-- 이름, 부서명, 직급명 출력

DECLARE
    NAME VARCHAR2 (9);
    D_TITLE VARCHAR2(10);
    J_NAME VARCHAR2(10);
BEGIN
    SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO NAME, D_TITLE, J_NAME
    FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING (JOB_CODE)
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || J_NAME);
END;
/

--PL/SQL : 상수 값
DECLARE
    NO1 NUMBER := 10;
    NO2 CONSTANT NUMBER :=20;
BEGIN
    NO1 := 100;
    DBMS_OUTPUT.PUT_LINE(NO1);
    DBMS_OUTPUT.PUT_LINE(NO2);
END;
/

-- %TYPE, %ROW : 참조형 변수

DECLARE
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    J_NAME JOB.JOB_NAME%TYPE;
BEGIN
    SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO NAME, D_TITLE, J_NAME
    FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING (JOB_CODE)
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || J_NAME);
END;
/

-- 사번을 입력받아서
-- 이름, 주민등록번호, 이메일, 급여 출력. %TYPE을 이용해서 출력
SELECT * FROM EMPLOYEE;
DECLARE
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    E_NO EMPLOYEE.EMP_NO%TYPE;
    E_EMAIL EMPLOYEE.EMAIL%TYPE;
    E_SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO E_NAME, E_NO, E_EMAIL, E_SAL
    FROM EMPLOYEE WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || E_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || E_NO);
    DBMS_OUTPUT.PUT_LINE('이메일 : ' || E_EMAIL);
    DBMS_OUTPUT.PUT_LINE('월급 : ' || E_SAL);
END;
/
--ROWTYPE 사용
DECLARE
    MYROW EMPLOYEE%ROWTYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO MYROW.EMP_NAME, MYROW.EMP_NO, MYROW.EMAIL, MYROW.SALARY
    FROM EMPLOYEE WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || MYROW.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || MYROW.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('이메일 : ' || MYROW.EMAIL);
    DBMS_OUTPUT.PUT_LINE('월급 : ' || MYROW.SALARY);
END;
/

--MYREC 사용 (순서가 일치하고 데이터 타입이 같을 때 유용)
DECLARE
    TYPE MY_RECORD IS RECORD (
        MY_NAME EMPLOYEE.EMP_NAME%TYPE,
        MY_NO EMPLOYEE.EMP_NO%TYPE,
        MY_EMAIL EMPLOYEE.EMAIL%TYPE,
        MY_SAL EMPLOYEE.SALARY%TYPE
    );
    MYREC MY_RECORD;
    
BEGIN
    SELECT EMP_NAME, EMP_NO, EMAIL, SALARY
    INTO MYREC
    FROM EMPLOYEE WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || MYREC.MY_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || MYREC.MY_NO);
    DBMS_OUTPUT.PUT_LINE('이메일 : ' || MYREC.MY_EMAIL);
    DBMS_OUTPUT.PUT_LINE('월급 : ' || MYREC.MY_SAL);
END;
/


--@실습문제1
--사번, 사원명, 직급코드, 급여를 담을수 있는 참조변수를 통해서 (%TYPE)
--송종기 사원의 사번, 사원명, 직급코드,급여를 익명블럭을 통해 스크립트 출력하세요.
DECLARE
    E_ID EMPLOYEE.EMP_ID%TYPE;
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
    E_SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
    INTO E_ID, E_NAME, J_CODE, E_SAL
    FROM EMPLOYEE WHERE EMP_NAME = '&EMP_NAME';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || E_ID);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || E_NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : ' || J_CODE);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || E_SAL);
END;
/


--@실습문제2
--사번, 사원명, 부서명,직급명을 담을수 있는 참조변수를 통해서 (record)
-- 사원명을 검색하여 해당 사원의 사번, 사원명, 부서명,직급명을 
-- 익명블럭을 통해 스크립트 출력하세요.

DECLARE
    TYPE MY_RECORD IS RECORD(
        MY_ID EMPLOYEE.EMP_ID%TYPE,
        MY_NAME EMPLOYEE.EMP_NAME%TYPE,
        MY_DTITLE DEPARTMENT.DEPT_TITLE%TYPE,
        MY_JNAME JOB.JOB_NAME%TYPE
    );
    MYREC MY_RECORD;
BEGIN
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO MYREC
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    LEFT JOIN JOB USING (JOB_CODE)
    WHERE EMP_NAME = '&EMP_NAME';
    DBMS_OUTPUT.PUT_LINE('사번 : ' || MYREC.MY_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || MYREC.MY_NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || MYREC.MY_DTITLE);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || MYREC.MY_JNAME);
END;
/

--@실습문제3
-- 사원번호를 입력하여 해당 사원을 찾아  (%ROWTYPE을 사용)
-- 사원명, 주민번호, 입사일, 부서명을 
-- 익명블럭을 통해 스크립트 출력하세요.

DECLARE
    EMP_ROW EMPLOYEE%ROWTYPE;
    DEPT_ROW DEPARTMENT%ROWTYPE;
BEGIN
    SELECT EMP_NAME, EMP_NO, HIRE_DATE, DEPT_TITLE
    INTO EMP_ROW.EMP_NAME, EMP_ROW.EMP_NO, EMP_ROW.HIRE_DATE, DEPT_ROW.DEPT_TITLE
    FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('사원명 : ' || EMP_ROW.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || EMP_ROW.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || EMP_ROW.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' ||DEPT_ROW.DEPT_TITLE);    
END;
/
