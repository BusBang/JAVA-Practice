CREATE TABLE MEMBER(
    MEMBER_ID VARCHAR2(20), --memberId
    MEMBER_PW VARCHAR2(20),
    MEMBER_NAME VARCHAR2(20),
    MEMBER_AGE NUMBER);
    
SELECT * FROM MEMBER;

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PW IS '회원비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';
COMMENT ON COLUMN MEMBER.MEMBER_AGE IS '회원나이';

CREATE TABLE USER_NOCONS( --제약 조건 없는 테이블 USER_NOCONS 생성
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PW VARCHAR2(30),
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);

INSERT INTO USER_NOCONS VALUES (1, 'user01', 'pass01', '유저1', '남자', '01021324575');
select * from user_nocons;

INSERT INTO USER_NOCONS VALUES (2, NULL, NULL, NULL, '남자', '01012345678');

CREATE TABLE USER_NOTNULL(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) NOT NULL,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
    );

INSERT INTO USER_NOTNULL VALUES (1, 'user01', 'pass01', '유저1', '남자', '01021324575');
INSERT INTO USER_NOTNULL VALUES (2, NULL, NULL, NULL, '남자', '01012345678');
SELECT * FROM USER_NOTNULL;

CREATE TABLE USER_UNIQUE(
    USER_NO NUMBER UNIQUE,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL, -- COLUMN LEVEL 제약
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
    );
INSERT INTO USER_UNIQUE VALUES (1, 'user01', 'pass01', '유저1', '남자', '01021324575');
INSERT INTO USER_UNIQUE VALUES (1, 'user01', 'pass01', '유저1', '남자', '01021324575');
SELECT * FROM USER_UNIQUE;
    
CREATE TABLE USER_UNIQUE2(
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11),
    UNIQUE (USER_NO, USER_ID)-- TABLE LEVEL에서도 가능함
    );    

INSERT INTO USER_UNIQUE2 VALUES (1, 'user01', 'pass01', '유저1', '남자', '01021324575');
INSERT INTO USER_UNIQUE2 VALUES (1, 'user02', 'pass01', '유저1', '남자', '01021324575');
--그런데 들어간다?
--TABLE LEVEL에서 CONSTRAINT을 걸게 되면 USER_NO, USER_ID 두 개 모두의 중복 여부를 검사하게 된다

--PRIAMRY KEY ( NOT NULL + UNIQUE )
--한 행을 구별하기 위한 고유 식별자
--TABLE 당 ONLY ONE.

CREATE TABLE USER_PK1 (
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2 (30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);

INSERT INTO USER_PK1 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678');
INSERT INTO USER_PK1 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678'); --안들어가짐

CREATE TABLE USER_PK2 (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2 (30),
    GENDER CHAR(6),
    PHONE CHAR(11),
    PRIMARY KEY(USER_NO)
);

INSERT INTO USER_PK2 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678');
INSERT INTO USER_PK2 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678'); --안 들어가짐

CREATE TABLE USER_PK3 (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2 (30),
    GENDER CHAR(6),
    PHONE CHAR(11),
    PRIMARY KEY(USER_NO, USER_ID)
);
INSERT INTO USER_PK3 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678');
INSERT INTO USER_PK3 VALUES (1, 'user01', 'pass01', '유저1','남자','01012345678'); --들어가지 않음.

--FOREIGN KEY (외래키)

CREATE TABLE SHOP_MEMBER(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);
INSERT INTO SHOP_MEMBER VALUES (1, 'USER01', 'PASS01', '유저1', '남자','01087654321');
INSERT INTO SHOP_MEMBER VALUES (2, 'USER02', 'PASS02', '유저2', '여자','01045873215');
INSERT INTO SHOP_MEMBER VALUES (3, 'USER03', 'PASS03', '유저3', '여자','01012798572');
SELECT * FROM SHOP_MEMBER;

CREATE TABLE SHOP_BUY(
    BUY_NO NUMBER PRIMARY KEY, --구매 번호
    USER_ID VARCHAR2(20), --구매자 ID
    PRODUCT_NAME VARCHAR2(30), --상품명
    BUY_DATE DATE, --구매 날짜
    FOREIGN KEY (USER_ID) REFERENCES SHOP_MEMBER (USER_ID) -- FOREIGN KEY(참조될 칼럼) REFERENCES 참조할 테이블(참조할 칼럼)
    );

INSERT INTO SHOP_BUY VALUES (1, 'USER01', '축구화', SYSDATE);
INSERT INTO SHOP_BUY VALUES (2, 'USER02', '야구화', SYSDATE);
INSERT INTO SHOP_BUY VALUES (3, 'USER03', '농구화', SYSDATE);
INSERT INTO SHOP_BUY VALUES (4, 'JAVALOVER', '추상화', SYSDATE); --parent key not found 오류 발생
--참조해야할 shop_member 테이블에 javalover가 존재하지 않기 때문에 오류 발생

SELECT * FROM SHOP_BUY;
--JAVALOVER를 넣으면 됨
INSERT INTO SHOP_MEMBER VALUES (4, 'JAVALOVER', 'PASS04', '유저4', '여자','01012798572');
INSERT INTO SHOP_BUY VALUES (4, 'JAVALOVER', '추상화', SYSDATE); 
SELECT * FROM SHOP_BUY;

CREATE TABLE SHOP_BUY2(
    BUY_NO NUMBER PRIMARY KEY, --구매 번호
    USER_ID VARCHAR2(20)  REFERENCES SHOP_MEMBER (USER_ID), --COLUMN LEVEL 에서도 외래키 설정이 가능하다
    PRODUCT_NAME VARCHAR2(30), --상품명
    BUY_DATE DATE --구매 날짜
    );

INSERT INTO SHOP_MEMBER VALUES (5, 'JAVAHATER', 'PASS05', '유저5', '남자','01075395146'); --작동함
DELETE FROM SHOP_MEMBER WHERE USER_ID='JAVAHATER'; --SHOP_MEMBER TABLE의 JAVAHATER 유저 아이디 삭제
DELETE FROM SHOP_MEMBER WHERE USER_ID='JAVALOVER'; --삭제되지 않음. 참조하고 있는 테이블이 있기 때문
--잘못 걸면 게시판에 게시글을 하나라도 올리면 회원 탈퇴가 안 됨.
--3가지 설정이 있음.

--DELETE OPTION
--1. ON DELETE RESTRICTED - 삭제 방지 (기본 설정)
--2. ON DELETE SET NULL - 삭제하면 NULL값 반환
--3. ON DELETE CASCADE - 삭제하면 다같이 삭제

--2. ON DELETE SET NULL
CREATE TABLE SHOP_MEMBER3(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);

CREATE TABLE SHOP_BUY3(
    BUY_NO NUMBER PRIMARY KEY, --구매 번호
    USER_ID VARCHAR2(20)  , --COLUMN LEVEL 에서도 외래키 설정이 가능하다
    PRODUCT_NAME VARCHAR2(30), --상품명
    BUY_DATE DATE, --구매 날짜
    FOREIGN KEY (USER_ID) REFERENCES SHOP_MEMBER3 (USER_ID) ON DELETE SET NULL
    );

INSERT INTO SHOP_MEMBER3 VALUES (1, 'USER01', 'PASS01', '유저1', '남자','01087654321');
INSERT INTO SHOP_MEMBER3 VALUES (2, 'USER02', 'PASS02', '유저2', '여자','01045873215');
INSERT INTO SHOP_MEMBER3 VALUES (3, 'USER03', 'PASS03', '유저3', '여자','01012798572');
INSERT INTO SHOP_MEMBER3 VALUES (4, 'JAVALOVER', 'PASS04', '유저4', '여자','01012798572');
SELECT * FROM SHOP_MEMBER3;
INSERT INTO SHOP_BUY3 VALUES (1, 'USER01', '축구화', SYSDATE);
INSERT INTO SHOP_BUY3 VALUES (2, 'USER02', '야구화', SYSDATE);
INSERT INTO SHOP_BUY3 VALUES (3, 'USER03', '농구화', SYSDATE);
INSERT INTO SHOP_BUY3 VALUES (4, 'JAVALOVER', '추상화', SYSDATE);
SELECT * FROM SHOP_BUY3;

DELETE FROM SHOP_MEMBER3 WHERE USER_ID = 'JAVALOVER'; -- 삭제 명령 수행
SELECT * FROM SHOP_MEMBER3; --SHOP_MEMBER TABLE의 
SELECT * FROM SHOP_BUY3;
--SHOP_BUY3의 4번째 회원 USER_ID가 NULL로 변했다.
------------------------
--3. ON DELETE CASCADE
CREATE TABLE SHOP_MEMBER4(
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PW VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);

CREATE TABLE SHOP_BUY4(
    BUY_NO NUMBER PRIMARY KEY, --구매 번호
    USER_ID VARCHAR2(20)  , --COLUMN LEVEL 에서도 외래키 설정이 가능하다
    PRODUCT_NAME VARCHAR2(30), --상품명
    BUY_DATE DATE, --구매 날짜
    FOREIGN KEY (USER_ID) REFERENCES SHOP_MEMBER4 (USER_ID) ON DELETE CASCADE
    );


INSERT INTO SHOP_MEMBER4 VALUES (1, 'USER01', 'PASS01', '유저1', '남자','01087654321');
INSERT INTO SHOP_MEMBER4 VALUES (2, 'USER02', 'PASS02', '유저2', '여자','01045873215');
INSERT INTO SHOP_MEMBER4 VALUES (3, 'USER03', 'PASS03', '유저3', '여자','01012798572');
INSERT INTO SHOP_MEMBER4 VALUES (4, 'JAVALOVER', 'PASS04', '유저4', '여자','01012798572');
SELECT * FROM SHOP_MEMBER4;
INSERT INTO SHOP_BUY4 VALUES (1, 'USER01', '축구화', SYSDATE);
INSERT INTO SHOP_BUY4 VALUES (2, 'USER02', '야구화', SYSDATE);
INSERT INTO SHOP_BUY4 VALUES (3, 'USER03', '농구화', SYSDATE);
INSERT INTO SHOP_BUY4 VALUES (4, 'JAVALOVER', '추상화', SYSDATE);
SELECT * FROM SHOP_BUY4;

DELETE FROM SHOP_MEMBER4 WHERE USER_ID = 'JAVALOVER'; -- 삭제 명령 수행
SELECT * FROM SHOP_MEMBER4;
SELECT * FROM SHOP_BUY4;
--SHOP_BUY4의 4번째 회원 USER_ID가 있던 ROW가 DELETE 되었다.
-------------------

--구매한 상품별로 고객의 아이디, 이름, 번호를 조회하기
SELECT BUY_NO, PRODUCT_NAME, USER_NAME, PHONE
FROM SHOP_BUY4
JOIN SHOP_MEMBER4 USING(USER_ID);

-----
--CHECK
-----

CREATE TABLE USER_CHECK (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20), --1글자를 입력해도 됨
    USER_PW VARCHAR2(30),
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6) CHECK (GENDER IN ('남자', '여자')), --GENDER 값에는 '남자', '여자' 라는 값 말고는 들어갈 수 없다.
    PHONE CHAR(11) -- 빈 공간을 공백을 채워넣음
    );

INSERT INTO USER_CHECK VALUES (1,'USER01', 'PASS01', '유저네임', '남자', '01022224444');
INSERT INTO USER_CHECK VALUES (2,'USER02', 'PASS02', '유저네임2', '여자', '01023454444');
INSERT INTO USER_CHECK VALUES (3,'USER03', 'PASS03', '유저네임3', '남자', '01068534444');
INSERT INTO USER_CHECK VALUES (4,'USER03', 'PASS04', '유저네임4', '남', '01024684444'); --CHECK에 의해 INSERT 거부
