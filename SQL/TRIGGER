---------------
---TRIGGER---
---------------

CREATE TABLE TRI_MEMBER
AS
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE WHERE 1=0;

CREATE TABLE TRI_DEL_MEMBER (
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(20),
    OUT_DATE DATE
);
DROP TABLE TRI_DEL_MEMBER;

INSERT INTO TRI_MEMBER VALUES (100, '방찬호', 4000000);
INSERT INTO TRI_MEMBER VALUES (101, '이호길', 10000000);
INSERT INTO TRI_MEMBER VALUES (102, '박서현', 5000000);
INSERT INTO TRI_MEMBER VALUES (103, '서동건', 1000000);
INSERT INTO TRI_MEMBER VALUES (104, '이도형', 6000000);
INSERT INTO TRI_MEMBER VALUES (105, '이윤수', 20000000);



SELECT * FROM TRI_MEMBER;
SELECT * FROM TRI_DEL_MEMBER;
DELETE FROM TRI_MEMBER WHERE EMP_ID = '100';
DELETE FROM TRI_MEMBER;
DELETE FROM TRI_DEL_MEMBER;
SELECT * FROM TRI_MEMBER;

CREATE OR REPLACE TRIGGER MEM_DEL_TRG -- 트리거 이름
AFTER DELETE ON TRI_MEMBER        -- 트리거 동작 시점
FOR EACH ROW                            -- 선택사항. 한 ROW 단위로 동작하는것. 4개를 삭제하게 되면 1개씩 네번에 동작
BEGIN
    INSERT INTO TRI_DEL_MEMBER VALUES(:OLD.EMP_ID, :OLD.EMP_NAME, SYSDATE); --:OLD 삭제 될 데이터 값 
    DBMS_OUTPUT.PUT_LINE('데이터 삭제 완료');
END;
/
DELETE FROM TRI_MEMBER WHERE EMP_ID = '102';
COMMIT;

--FOR EACH ROW
--행 단위로 동작하는 것이기 때문에 4개를 삭제하고 COMMIT을 하게 되면 트리거가 4번 동작하는 것을 알 수 있다.
--반대로 FOR EACH ROW를 안 쓰게 되면, 4개를 삭제후 COMMIT을 하게 되면 메세지가 1번 출력된다
--COMMIT - DML 동작을 저장

SET SERVEROUTPUT ON;

--INSERT TRIGGER
CREATE OR REPLACE TRIGGER TRI_MEM_INSERT__TRG
AFTER INSERT ON TRI_MEMBER      -- INSERT되면, 
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.EMP_NAME || '님이 입사하셨습니다. ');
END;
/
--트리거 동작 확인
INSERT INTO TRI_MEMBER VALUES (106, '김태훈', 23300000);
COMMIT;

--업데이트 트리거
CREATE OR REPLACE TRIGGER TRI_MEM_UPDATE
AFTER UPDATE ON TRI_MEMBER
FOR EACH ROW
BEGIN
    INSERT INTO LOG_TBL VALUES(:OLD.EMP_ID, :OLD.EMP_NAME || '->' || :NEW.EMP_NAME, SYSDATE);
    DBMS_OUTPUT.PUT_LINE(:OLD.EMP_NAME || ' -> ' || :NEW.EMP_NAME || '으로 변경되었습니다.');
END;
/
--트리거 동작 확인
UPDATE TRI_MEMBER SET EMP_NAME='홍길동' WHERE EMP_ID=100;
COMMIT;
SELECT * FROM TRI_MEMBER;
SELECT * FROM LOG_TBL;


CREATE TABLE LOG_TBL (
    EMP_ID NUMBER,
    CONTENT VARCHAR2 (200),
    MODIFY_DATE DATE
);



------------------------------------------------------------------------------------
-----------------------TRIGGER EXAMPLE-----------------------------------------
------------------------------------------------------------------------------------
/*
1. PCODE, DCODE는 시퀀스로 번호 책정
2. 입출고 테이블의 PCODE는 상품 테이블의 PCODE를 참조 (FK)
3. 입출고 테이블의 STATUS 값은 '입고 / 출고'만 가능
4. 입/출고가 발생하면 트리거를 통해 상품테이블의 STOCK을 자동으로 변경
*/

GRANT RESOURCE TO TEST01;
SET SERVEROUTPUT ON;


--TALBE 생성
CREATE TABLE PRODUCT (
    PCODE NUMBER PRIMARY KEY,
    PNAME VARCHAR2 (30),
    BRAND VARCHAR2 (30),
    PRICE NUMBER,
    STOCK NUMBER DEFAULT 0
);

CREATE TABLE INOUTPUT (
    DCODE NUMBER PRIMARY KEY,
    PCODE NUMBER REFERENCES PRODUCT(PCODE),
    PDATE DATE,
    AMOUNT NUMBER,
    STATUS VARCHAR2(10) CHECK (STATUS IN ('입고', '출고'))
);
SELECT * FROM PRODUCT;
SELECT * FROM INOUTPUT;

--SEQUNCE 생성

CREATE SEQUENCE SEQ_PCODE
START WITH 1
INCREMENT BY 1
MAXVALUE 10000
NOCYCLE
NOCACHE;

CREATE SEQUENCE SEQ_DCODE
START WITH 1
INCREMENT BY 1
MAXVALUE 10000
NOCYCLE
NOCACHE;

/*TRIGGER
1. 입고 : INOUTPUT에 INSERT, UPDATE PRODUCT
2. 출고 : INOUTPUT에 INSERT, UPDATE PRODUCT
3. PRODUCT에서 제품을 삭제할 때, 필요X
*/

--TRIGGER
CREATE OR REPLACE TRIGGER INSERT_PRODUCT_TRG
AFTER INSERT ON PRODUCT
FOR EACH ROW
BEGIN
    INSERT INTO PRODUCT VALUES (SEQ_DCODE.NEXTVAL, SEQ_PCODE.CURRVAL, SYSDATE);
END;
/

-- 입출고 시,
CREATE OR REPLACE TRIGGER INPUT_TRG
AFTER INSERT ON INOUTPUT
FOR EACH ROW
BEGIN
    IF (:NEW.STATUS = '입고')  THEN
       UPDATE PRODUCT SET STOCK = STOCK+:NEW.AMOUNT WHERE PCODE=:NEW.PCODE;
       DBMS_OUTPUT.PUT_LINE('입고가 완료되었습니다. ');
    ELSE
       UPDATE PRODUCT SET STOCK = STOCK-:NEW.AMOUNT WHERE PCODE=:NEW.PCODE;
       DBMS_OUTPUT.PUT_LINE('출고가 완료되었습니다. ');
    END IF;
END;
/

SELECT * FROM PRODUCT;
SELECT * FROM INOUTPUT;

INSERT INTO PRODUCT VALUES (SEQ_PCODE.NEXTVAL, '갤럭시S1', '삼성', '2000000', 0);
INSERT INTO INOUTPUT VALUES (SEQ_DCODE.NEXTVAL, 1, SYSDATE, 5, '입고');
INSERT INTO INOUTPUT VALUES (SEQ_DCODE.NEXTVAL, 1, SYSDATE, 5, '출고');
