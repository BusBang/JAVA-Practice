package hujhhj;

public class dddd {
	//for(;;);
	//arraycopy();
	//arr2=arr1.clone();
	
	@Override
	public String toString() {
		//상속 :
		//1) 보다 적은 양의 코드로 새로운 클래스 작성 가능
		// 2) 공통의 코드 관리로 코드의 추가 변경 및 변경 용이
		// 3) 코드 중복을 제거하여 생산성고 ㅏ유지보수에 크게 기여
		
		/*
		 1. 부모클래스의 생성자는 상속 안 됨
		 2. 부모의 private 멤버는 상속은 ㄷ되지만 직접 접근 붉
		 3. 모든 클래스는 Object클래스의 후손
		 
		 super() 부모 객체의 생성자를 호출하는 ㅁ소드
		 매개변수가 있는 부모 생성자를 호출하는 경우 super(매개변수) 사용
		 가장 첫 줄에서만 사용 가능
		 
		 Override()
		자식 클래스가 상속받은 부모 메소드를 재작성 하는 것.
		
		 동적 바인딩 : 
		 자식 객체를 통한 실행시 후손의 것이 우선권을 가짐
		 
		  다형성 :
		 여러개의 형태를 갖는다는 의미로. 객체 지향 프로그래밍 3대 특징
		 상속을 이용한 기술로, 자식 객체를 부모클랫 ㅡ타입의 변수로 다룰 수 있는 기술
		 
		 Up casting :
		 부모타입의 참조형 변수로 자식타입의 개체 주소를 받은 경우,
		 해당 객체는 원래 부모타입 멤버만 참조가 가능
		 
		 Down casting :
		 자식 객체에만 존재하는 멤버를 참조해야하는 경우,
		 자식 클래스 타입으로 형 변환을 해야함. 이것을 다운 캐스팅이라고 함
		 
		 
		 
		 		 */
	}
	
	

}
